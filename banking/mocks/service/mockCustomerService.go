// Code generated by MockGen. DO NOT EDIT.
// Source: banking/service (interfaces: CustomerService)

// Package service is a generated GoMock package.
package service

import (
	dto "banking/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	errs "github.com/wandz2810/banking-lib/errs"
)

// MockCustomerService is a mock of CustomerService interface.
type MockCustomerService struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerServiceMockRecorder
}

// MockCustomerServiceMockRecorder is the mock recorder for MockCustomerService.
type MockCustomerServiceMockRecorder struct {
	mock *MockCustomerService
}

// NewMockCustomerService creates a new mock instance.
func NewMockCustomerService(ctrl *gomock.Controller) *MockCustomerService {
	mock := &MockCustomerService{ctrl: ctrl}
	mock.recorder = &MockCustomerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerService) EXPECT() *MockCustomerServiceMockRecorder {
	return m.recorder
}

// DeleteUserById mocks base method.
func (m *MockCustomerService) DeleteUserById(arg0 string) *errs.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", arg0)
	ret0, _ := ret[0].(*errs.AppError)
	return ret0
}

// DeleteUserById indicates an expected call of DeleteUserById.
func (mr *MockCustomerServiceMockRecorder) DeleteUserById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockCustomerService)(nil).DeleteUserById), arg0)
}

// GetAllCustomers mocks base method.
func (m *MockCustomerService) GetAllCustomers(arg0 string) ([]dto.CustomerResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCustomers", arg0)
	ret0, _ := ret[0].([]dto.CustomerResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetAllCustomers indicates an expected call of GetAllCustomers.
func (mr *MockCustomerServiceMockRecorder) GetAllCustomers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCustomers", reflect.TypeOf((*MockCustomerService)(nil).GetAllCustomers), arg0)
}

// GetCustomerById mocks base method.
func (m *MockCustomerService) GetCustomerById(arg0 string) (*dto.CustomerResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerById", arg0)
	ret0, _ := ret[0].(*dto.CustomerResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetCustomerById indicates an expected call of GetCustomerById.
func (mr *MockCustomerServiceMockRecorder) GetCustomerById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerById", reflect.TypeOf((*MockCustomerService)(nil).GetCustomerById), arg0)
}

// UpdateCustomer mocks base method.
func (m *MockCustomerService) UpdateCustomer(arg0 dto.UpdateCustomerResquest) (*dto.UpdateCustomerResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", arg0)
	ret0, _ := ret[0].(*dto.UpdateCustomerResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockCustomerServiceMockRecorder) UpdateCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockCustomerService)(nil).UpdateCustomer), arg0)
}
