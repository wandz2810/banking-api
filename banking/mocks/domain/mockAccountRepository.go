// Code generated by MockGen. DO NOT EDIT.
// Source: banking/domain (interfaces: AccountRepository)

// Package domain is a generated GoMock package.
package domain

import (
	domain "banking/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	errs "github.com/wandz2810/banking-lib/errs"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// FindByAccountId mocks base method.
func (m *MockAccountRepository) FindByAccountId(arg0 string) (*domain.Account, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccountId", arg0)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindByAccountId indicates an expected call of FindByAccountId.
func (mr *MockAccountRepositoryMockRecorder) FindByAccountId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccountId", reflect.TypeOf((*MockAccountRepository)(nil).FindByAccountId), arg0)
}

// FindByCustomerIdAndAccountId mocks base method.
func (m *MockAccountRepository) FindByCustomerIdAndAccountId(arg0, arg1 string) (*domain.Account, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCustomerIdAndAccountId", arg0, arg1)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindByCustomerIdAndAccountId indicates an expected call of FindByCustomerIdAndAccountId.
func (mr *MockAccountRepositoryMockRecorder) FindByCustomerIdAndAccountId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCustomerIdAndAccountId", reflect.TypeOf((*MockAccountRepository)(nil).FindByCustomerIdAndAccountId), arg0, arg1)
}

// SaveAccount mocks base method.
func (m *MockAccountRepository) SaveAccount(arg0 domain.Account) (*domain.Account, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccount", arg0)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// SaveAccount indicates an expected call of SaveAccount.
func (mr *MockAccountRepositoryMockRecorder) SaveAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccount", reflect.TypeOf((*MockAccountRepository)(nil).SaveAccount), arg0)
}

// SaveTransaction mocks base method.
func (m *MockAccountRepository) SaveTransaction(arg0 domain.Transaction) (*domain.Transaction, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTransaction", arg0)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// SaveTransaction indicates an expected call of SaveTransaction.
func (mr *MockAccountRepositoryMockRecorder) SaveTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransaction", reflect.TypeOf((*MockAccountRepository)(nil).SaveTransaction), arg0)
}
